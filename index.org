#+TITLE: Useful Matlab Functions
:DRAWER:
#+LANGUAGE: en
#+EMAIL: dehaeze.thomas@gmail.com
#+AUTHOR: Dehaeze Thomas

#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="./css/htmlize.css"/>
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="./css/readtheorg.css"/>
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="./css/zenburn.css"/>
#+HTML_HEAD: <script type="text/javascript" src="./js/jquery.min.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="./js/bootstrap.min.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="./js/jquery.stickytableheaders.min.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="./js/readtheorg.js"></script>

#+PROPERTY: header-args:matlab  :session *MATLAB*
#+PROPERTY: header-args:matlab+ :comments none
#+PROPERTY: header-args:matlab+ :exports both
#+PROPERTY: header-args:matlab+ :results none
#+PROPERTY: header-args:matlab+ :eval no-export
#+PROPERTY: header-args:matlab+ :noweb yes
#+PROPERTY: header-args:matlab+ :mkdirp yes
#+PROPERTY: header-args:matlab+ :output-dir figs
:END:

* ExportFig
:PROPERTIES:
:header-args:matlab+: :tangle src/exportFig.m
:END:

** Function Description
#+begin_src matlab
  function [filepath] = exportFig(filepath, args)
  % exportFig - Function to save figure in many different formats
  %
  % Syntax: exportFig(filepath, args)
  %
  % Inputs:
  %    - filepath - path to file to export exportation (with or without extension)
  %    - args:
  %       - fig    - Save fig file (default: false)
  %       - pdf    - Save pdf file (default: true)
  %       - eps    - Save eps file (default: false)
  %       - png    - Save png file (default: true)
  %       - svg    - Save svg file (default: false)
  %       - width  -
  %       - height -
#+end_src

** Optional Parameters
#+begin_src matlab
  arguments
      filepath
      args.fig (1,1) logical {mustBeNumericOrLogical}    = false
      args.pdf (1,1) logical {mustBeNumericOrLogical}    = true
      args.png (1,1) logical {mustBeNumericOrLogical}    = true
      args.eps (1,1) logical {mustBeNumericOrLogical}    = false
      args.svg (1,1) logical {mustBeNumericOrLogical}    = false
      args.width  = 'normal'
      args.height = 'normal'
  end
#+end_src


** Remove file extension
#+begin_src matlab
  filepath_split = strsplit(filepath, '.');

  if length(filepath_split) > 1
      filepath = filepath_split{1};
  end
#+end_src

** Change size of figure
- width-height
- first part (width): normal, full, half
- second part (height): normal, short, tall

We put here a negative value because when a positive value, the output result might be cropped out.
#+begin_src matlab
  pos = [-10 -10];
#+end_src

Width sizes.
#+begin_src matlab
  if strcmp(args.width, 'normal')
      pos = [pos, 800];
  elseif strcmp(args.width, 'wide')
      pos = [pos, 900];
  elseif strcmp(args.width, 'full')
      pos = [pos, 1200];
  elseif strcmp(args.width, 'half')
      pos = [pos, 650];
  elseif strcmp(args.width, 'third')
      pos = [pos, 400];
  elseif isnumeric(args.width)
      pos = [pos, args.width];
  else
      pos = [pos, 800];
  end
#+end_src

Height sizes.
#+begin_src matlab
  if strcmp(args.height, 'normal')
      pos = [pos, 500];
  elseif strcmp(args.height, 'tall')
      pos = [pos, 800];
  elseif strcmp(args.height, 'full')
      pos = [pos, 1000];
  elseif strcmp(args.height, 'short')
      pos = [pos, 400];
  elseif strcmp(args.height, 'tiny')
      pos = [pos, 300];
  elseif isnumeric(args.height)
      pos = [pos, args.height];
  else
      pos = [pos, 500];
  end
#+end_src

** Exportation
Hide the figure so that =i3= doesn't interact with it during exports.
#+begin_src matlab
  f = gcf;
  set(f, 'visible', 'off');
#+end_src

Set wanted size.
#+begin_src matlab
  set(f,'pos', pos);
#+end_src

#+begin_src matlab
  if args.pdf || args.svg
      exportgraphics(f, sprintf('%s.pdf', filepath), 'BackgroundColor', 'none', 'ContentType', 'vector');
  end

  if args.png
      try
          system(sprintf('pdftocairo -png -transp -singlefile %s.pdf %s >/dev/null 2>&1', filepath, filepath));
      catch
          warning('pdftocario command has failed. Using exportgraphics instead.');
          exportgraphics(f, sprintf('%s.png', filepath));
      end
  end

  if args.eps
      exportgraphics(f, sprintf('%s.eps', filepath), 'BackgroundColor', 'none');
  end

  if args.svg
      system(sprintf('pdftocairo -svg %s.pdf %s.svg >/dev/null 2>&1', filepath, filepath));
      if ~args.pdf
          system(sprintf('rm %s.pdf', filepath));
      end
  end

  if args.fig
      saveas(f, filepath, 'fig');
  end
#+end_src

Show the figure again
#+begin_src matlab
  set(f, 'visible', 'on');
#+end_src

End of function
#+begin_src matlab
  filepath = [filepath, '.png'];
  end
#+end_src

** Custom Validation Function
#+begin_src matlab
  function mustBeWidth(arg)
      if any(mustBeMember(arg,{'normal', 'wide', 'full', 'half', 'third'}) || mustBePositive(str2num(arg)))
          error('Width is wrongly specify')
      end
  end
#+end_src

#+begin_src matlab
  function mustBeHeight(arg)
      if any(mustBeMember(arg,{'normal', 'tall', 'full', 'short', 'tiny'}) || mustBePositive(str2num(arg)))
          error('Height is wrongly specify')
      end
  end
#+end_src

* ExportFig (old)                                                   :noexport:
:PROPERTIES:
:header-args:matlab+: :tangle no
:END:
** Documentation
#+begin_src matlab
  function [file_name] = exportFig(file_path, fig_size, opts_param)
  % exportFig - Function to save figure in many different formats
  %
  % Syntax: exportFig(file_path, fig_size, opts_param)
  %
  % Inputs:
  %    - file_path - file_path to file to export exportation including filename and extension
  %    - fig_size - Optional argument 'width-height'
  %    - opts_param:
  %       - tikz - Save tikz file (default: false)
  %       - pdf - Save pdf file(default: false)
  %       - svg - Save svg file(default: false)
  %       - eps - Save eps file(default: false)
  %       - png - Save png file(default: false)

#+end_src

** Default values for opts
#+begin_src matlab
  opts = struct('fig',  false, ...
                'tikz', false, ...
                'pdf',  true,  ...
                'svg',  false, ...
                'eps',  false, ...
                'png',  false  ...
  );

#+end_src

** Check number of argument
#+begin_src matlab
  ni = nargin;

  if ni == 1 % Not specifying fig_size
      opts_param = struct();
      fig_size = 'normal-normal';
  end

#+end_src

** Populate opts with input parameters
#+begin_src matlab
  if exist('opts_param','var')
      for opt = fieldnames(opts_param)'
          opts.(opt{1}) = opts_param.(opt{1});
      end
  end

#+end_src

** Extract file name, path and extension
#+begin_src matlab
  filepath_split = strsplit(file_path, '.');

  if length(filepath_split) == 2
      file_extension = filepath_split{end};
      filepath = filepath_split{1};
      filepath_split = strsplit(filepath, '/');
      if length(filepath_split) > 1
        filepath = strjoin(filepath_split(1:end-1), '/');
        filename = filepath_split{end};
      else % Only filename
        filepath = './';
        filename = filepath_split{1};
      end
  else
      return;
  end
#+end_src

** Change Folder
#+begin_src matlab
  % Save current folder go to back here after
  current_folder = pwd;

  % Create folder where to store figures if not absolute path
  if filepath(1) ~= '~' || filepath(1) ~= '/'
    system(sprintf('mkdir -p %s', filepath));
  end

  % Go in the folder where to store the figures
  cd(filepath);
#+end_src

** Change size of figure

- width-height
- first part (width): normal, full, half
- second part (height): normal, short, tall

#+begin_src matlab
  size_strings = strsplit(fig_size, '-');
  width_string = size_strings{1};
  height_string = size_strings{2};
#+end_src

We put here a negative value because when a positive value, the output result might be cropped out.
#+begin_src matlab
  opts.pos = [-10 -10];
#+end_src

Width sizes.
#+begin_src matlab
  if strcmp(width_string, 'normal')
      opts.pos = [opts.pos, 800];
  elseif strcmp(width_string, 'wide')
      opts.pos = [opts.pos, 900];
  elseif strcmp(width_string, 'full')
      opts.pos = [opts.pos, 1200];
  elseif strcmp(width_string, 'half')
      opts.pos = [opts.pos, 650];
  elseif strcmp(width_string, 'third')
      opts.pos = [opts.pos, 400];
  elseif ~isnan(str2double(width_string))
      opts.pos = [opts.pos, str2double(width_string)];
  else
      opts.pos = [opts.pos, 800];
  end
#+end_src

Height sizes.
#+begin_src matlab
  if strcmp(height_string, 'normal')
      opts.pos = [opts.pos, 500];
  elseif strcmp(height_string, 'tall')
      opts.pos = [opts.pos, 800];
  elseif strcmp(height_string, 'full')
      opts.pos = [opts.pos, 1000];
  elseif strcmp(height_string, 'short')
      opts.pos = [opts.pos, 400];
  elseif strcmp(height_string, 'tiny')
      opts.pos = [opts.pos, 300];
  elseif ~isnan(str2double(height_string))
      opts.pos = [opts.pos, str2double(height_string)];
  else
      opts.pos = [opts.pos, 500];
  end
#+end_src

Hide the figure so that =i3= doesn't interact with it during exports.
#+begin_src matlab
  f = gcf;
  set(f, 'visible', 'off');
#+end_src

Set white color for the axis.
#+begin_src matlab
  set(gcf,'Color','white');
  set(gca,'Color','white');
#+end_src

Use =tightfig= in order to have the correct size.
#+begin_src matlab
  set(f,'pos', opts.pos);
  tightfig;
  % set(f,'pos', opts.pos);

  % drawnow;
#+end_src

** Exportation
The main exportation is to =pdf=, then the other files are derived from the pdf file.

We use =export_fig= to export to =pdf= with the =-transparent= option.

*** Export to pdf
#+begin_src matlab
  % export_fig(file_name, '-transparent', '-svg', '-png', '-pdf');
  export_fig(filename, '-transparent', '-pdf');
#+end_src

*** Export to png
We use =pdftocairo= to export from =pdf= to =png=.
The option =-transp= is used for transparency, and =-singlefile= is used to not append the current page number to the filename.
#+begin_src matlab
  % PNG
  if opts.png
      try
          system(sprintf('pdftocairo -png -transp -singlefile %s.pdf >/dev/null 2>&1', filename));
      end
  end
#+end_src

*** Export to svg
#+begin_src matlab
  % SVG
  if opts.svg
      try
          system(sprintf('pdftocairo -svg %s.pdf >/dev/null 2>&1', filename));
      end
  end
#+end_src

*** Export to fig
#+begin_src matlab
  if opts.fig
      saveas(f, filename, 'fig');
  end
#+end_src

*** Export to tikz
#+begin_src matlab
  if opts.tikz
      cleanfigure;
      matlab2tikz(sprintf('%s.tex', filename), 'showInfo', false);
  end
#+end_src

*** Delete the pdf is not wanted
#+begin_src matlab
  % if ~opts.pdf
  %     system(sprintf('rm %s.pdf', file_name));
  % end
#+end_src

** Go back to previous folder
#+begin_src matlab
  cd(current_folder);
#+end_src

** Show the figure again
#+begin_src matlab
  set(f, 'visible', 'on');
#+end_src

** Old Export
#+begin_src matlab
  % % EPS
  % if opts.eps
  %     export_fig(sprintf('%s/%s/%s', opts.path, opts.folder, file_name), '-eps')
  % end

  % % SVG
  % if opts.svg
  %     % set(gcf, 'Units', 'centimeters');
  %     % pos = get(gcf, 'Position');
  %     % pos(3) = 3; % Select the width of the figure in [cm]
  %     % pos(4) = 3; % Select the height of the figure in [cm]
  %     % set(gcf, 'Position', pos);
  %     % plot2svg(sprintf('%s/%s/%s.svg', opts.path, opts.folder, file_name))
  %     fig2svg(sprintf('%s/%s/%s.svg', opts.path, opts.folder, file_name))
  % end

  % % TIKZ
  % if opts.tikz
  %     cleanfigure;
  %     matlab2tikz(sprintf('%s/%s/%s.tex', opts.path, opts.folder, file_name), ...
  %         'height', '\fheight', ...
  %         'width',  '\fwidth',  ...
  %         'showInfo', false);

  %     str_start = [...
  %         "\documentclass[12pt,tikz]{standalone}"; ...
  %         ""; ...
  %         "\ifstandalone%"; ...
  %         "\usepackage{import}"; ...
  %         "\import{../../configuration/}{comon_packages.tex}%"; ...
  %         "\import{../../configuration/}{conftikz.tex}%"; ...
  %         "\import{../../configuration/}{custom_config.tex}%"; ...
  %         ""; ...
  %     ];

  %     if strcmp(width_string, 'normal')
  %         str_start = [str_start; "\setlength\fwidth{6cm}"; ];
  %     elseif strcmp(width_string, 'wide')
  %         str_start = [str_start; "\setlength\fwidth{8cm}"; ];
  %     elseif strcmp(width_string, 'full')
  %         str_start = [str_start; "\setlength\fwidth{\linewidth}"; ];
  %     elseif strcmp(width_string, 'half')
  %         str_start = [str_start; "\setlength\fwidth{0.5\linewidth}"; ];
  %     elseif strcmp(width_string, 'third')
  %         str_start = [str_start; "\setlength\fwidth{0.33\linewidth}"; ];
  %     else
  %         str_start = [str_start; "\setlength\fwidth{6cm}"; ];
  %     end

  %     if strcmp(height_string, 'normal')
  %         str_start = [str_start; "\setlength\fheight{4cm}"; ];
  %     elseif strcmp(height_string, 'tall')
  %         str_start = [str_start; "\setlength\fheight{6cm}"; ];
  %     elseif strcmp(height_string, 'short')
  %         str_start = [str_start; "\setlength\fheight{3cm}"; ];
  %     elseif strcmp(height_string, 'tiny')
  %         str_start = [str_start; "\setlength\fheight{2cm}"; ];
  %     else
  %         str_start = [str_start; "\setlength\fheight{4cm}"; ];
  %     end

  %     str_start = [str_start; ...
  %         "\fi"; ...
  %         ""; ...
  %         "\begin{document}"; ...
  %     ];

  %     str_end = "\end{document}";

  %     str_middle = fileread(sprintf('%s/%s/%s.tex', opts.path, opts.folder, file_name));

  %     fid = fopen(sprintf('%s/%s/%s.tex', opts.path, opts.folder, file_name), 'wt');

  %     fprintf(fid, '%s\n', str_start);
  %     fprintf(fid, '%s\n', str_middle);
  %     fprintf(fid, '%s\n', str_end);

  %     fclose(fid);
  % end
#+end_src
* bodeFig
:PROPERTIES:
:header-args:matlab+: :tangle src/bodeFig.m
:END:
#+begin_src matlab
  function [] = bodeFig(systems, freqs, opts_param)
  %% TODO - Make documentation

  %% Default values for opts
      opts = struct(...
          'phase', false, ...
          'ylabel', '' ...
          );

      %% Check if the frequency is specified
      ni = nargin;

      if ni == 2
          if isstruct(freqs)
              opts_param = freqs;
              clear freqs;
          else
              opts_param = struct();
          end
      end

      %% Populate opts with input parameters
      if exist('opts_param','var')
          for opt = fieldnames(opts_param)'
              opts.(opt{1}) = opts_param.(opt{1});
          end
      end

      %% Number of subplots
      n_subplots = 1;
      if opts.phase
          n_subplots = 2;
      end

      %% Cell of transfer function to array of tf
      systems_arr = tf(0)*zeros(length(systems), 1);
      for i = 1:length(systems)
          systems{i}.InputName = {};
          systems{i}.OutputName = {};
          systems_arr(i) = tf(systems{i});
      end

      %% Compute the frequency response
      bode_opts = bodeoptions;
      bode_opts.FreqUnits       = 'Hz';
      bode_opts.PhaseWrapping   = 'on';

      if ~exist('freqs', 'var')
          [resp,freqs] = freqresp(systems_arr);
          freqs = freqs/(2*pi);
      else
          [resp,~] = freqresp(systems_arr, freqs, 'Hz');
      end
      resp_mag = abs(resp);
      resp_phase = 180/pi*angle(resp);

      %% Plot
      figure;

      %% Phase
      if opts.phase
          ax2 = subplot(n_subplots,1,2);
          hold on;
          for i = 1:length(systems)
              plot(freqs, mod(180+resp_phase(i, :), 360)-180);
          end
          set(gca,'xscale','log');
          ylim([-180, 180]);
          yticks([-180, -90, 0, 90, 180]);
          xlabel('Frequency [Hz]'); ylabel('Phase [deg]');
          hold off;
      end

      %% Amplitude
      ax1 = subplot(n_subplots,1,1);
      hold on;
      for i = 1:length(systems)
          plot(freqs, resp_mag(i, :));
      end
      set(gca,'xscale','log'); set(gca,'yscale','log');
      if length(opts.ylabel) > 1
          ylabel(opts.ylabel);
      else
          ylabel('Amplitude');
      end
      if ~opts.phase
          xlabel('Frequency [Hz]');
      else
          set(ax1,'XTickLabel',[]);
      end
      hold off;

      %% Link X-axis
      if opts.phase
          linkaxes([ax1, ax2], 'x');
      end

      xlim([freqs(1), freqs(end)]);
  end
#+end_src

* endOfCode
:PROPERTIES:
:header-args:matlab+: :tangle src/endOfCode.m
:END:
#+begin_src matlab
  function [] = endOfCode()
      load('gong', 'Fs', 'y');
      sound(0.5*y, Fs);
  end
#+end_src

* matSplit
:PROPERTIES:
:header-args:matlab+: :tangle src/matSplit.m
:END:
#+begin_src matlab
  function varargout = matSplit(A,dim)
  %MATSPLIT Split matrix elements into separate variables.
  %   VARARGOUT = MATSPLIT(A) returns each element of the array A in a
  %   separate variable defined by VARARGOUT.
  %
  %   VARARGOUT = MATSPLIT(A,DIM) only splits the matrix in one dimension. If
  %   DIM=1, each column vector is assigned to an output variable. If
  %   DIM=2, each row vector is assigned to an output variable.

      if nargin==1
          varargout = num2cell(A);
      else
          varargout = num2cell(A,dim);
      end

  end
#+end_src

* openSisotool
:PROPERTIES:
:header-args:matlab+: :tangle src/openSisotool.m
:END:
#+begin_src matlab
  function [] = openSisotool(G)
  % mycustomcontrolsysdesignerfcn(G)
  %
  % Creates the following Control System Designer session:
  %   1) Configuration 4 with the plant specified by G
  %   2) Root locus and bode editors for the outer-loop
  %   3) Bode editor for the inner-loop.

  %   Copyright 1986-2005 The MathWorks, Inc.

  % Create initialization object with configuration 4
      s = sisoinit(1);

      % Set the value of the plant
      s.G.Value = G;

      % Specify the editors for the Open-Loop Responses
      s.OL1.View = {'rlocus','bode'};

      controlSystemDesigner(s)

  end
#+end_src

* plotcolors
:PROPERTIES:
:header-args:matlab+: :tangle src/plotcolors.m
:END:
#+begin_src matlab
  %% Default plot colors
  c1 = [     0    0.4470    0.7410]; % Blue
  c2 = [0.8500    0.3250    0.0980]; % Orange
  c3 = [0.9290    0.6940    0.1250]; % Yellow
  c4 = [0.4940    0.1840    0.5560]; % Purple
  c5 = [0.4660    0.6740    0.1880]; % Green
  c6 = [0.3010    0.7450    0.9330]; % Light Blue
  c7 = [0.6350    0.0780    0.1840]; % Red
#+end_src

* tf2string
:PROPERTIES:
:header-args:matlab+: :tangle src/tf2string.m
:END:
#+begin_src matlab
  function [G_string] = tf2string(G)
      G = tf(G);
      syms s;
      sym_num=poly2sym(G.num{:},s);
      sym_num=vpa(sym_num, 4);
      char_num=char(sym_num);

      sym_den=poly2sym(G.den{:},s);
      sym_den=vpa(sym_den, 4);
      char_den=char(sym_den);

      G_string = ['(', char_num, ')/(', char_den, ')'];
  end
#+end_src

* zpk2latex
:PROPERTIES:
:header-args:matlab+: :tangle src/zpk2latex.m
:END:
#+begin_src matlab
  function [G_string] = zpk2latex(G)
      [z, p, k] = zpkdata(G);

      C_gain = sprintf('%.1e ', k);

      C_num = '';
      for i = 1:length(z{1})
          C_num = horzcat(C_num, '(s');
          if imag(z{1}(i)) == 0
              C_num = horzcat(C_num, sprintf('%+.1e', -z{1}(i)));
          else
              C_num = horzcat(C_num, sprintf('-(%.1e%+.1e i)', real(z{1}(i)), imag(z{1}(i))));
          end
          C_num = horzcat(C_num, ')');
      end

      C_den = '';
      for i = 1:length(p{1})
          C_den = horzcat(C_den, '(s');
          if imag(p{1}(i)) == 0
              C_den = horzcat(C_den, sprintf('%+.1e', -p{1}(i)));
          else
              C_den = horzcat(C_den, sprintf('-(%.1e%+.1e i)', real(p{1}(i)), imag(p{1}(i))));
          end
          C_den = horzcat(C_den, ')');
      end

      C_size = max(length(C_num), length(C_den));

      G_string = [C_gain, '\frac{', C_num, '}{', C_den, '}'];
  end
#+end_src

* zpk2string
:PROPERTIES:
:header-args:matlab+: :tangle src/zpk2string.m
:END:
#+begin_src matlab
  function [G_string] = zpk2string(G)
      [z, p, k] = zpkdata(G);

      C_gain = sprintf('%+.1e ', k);

      C_num = repmat(' ', 1, length(C_gain)+1);
      for i = 1:length(z{1})
          C_num = horzcat(C_num, '(s');
          if imag(z{1}(i)) == 0
              C_num = horzcat(C_num, sprintf('%+.1e', -z{1}(i)));
          else
              C_num = horzcat(C_num, sprintf('-(%.1e%+.1e i)', real(z{1}(i)), imag(z{1}(i))));
          end
          C_num = horzcat(C_num, ')');
      end

      C_den = repmat(' ', 1, length(C_gain)+1);
      for i = 1:length(p{1})
          C_den = horzcat(C_den, '(s');
          if imag(p{1}(i)) == 0
              C_den = horzcat(C_den, sprintf('%+.1e', -p{1}(i)));
          else
              C_den = horzcat(C_den, sprintf('-(%.1e%+.1e i)', real(p{1}(i)), imag(p{1}(i))));
          end
          C_den = horzcat(C_den, ')');
      end

      C_size = max(length(C_num), length(C_den));
      C_frac = repmat('-', 1, C_size+1);

      G_string = [C_num, '\n', C_gain, C_frac, '\n', C_den];
  end
#+end_src
* flipRphZeros
:PROPERTIES:
:header-args:matlab+: :tangle src/flipRphZeros.m
:END:

#+begin_src matlab
  function [Gp] = flipRphZeros(G)
  % flipRphZeros -
  %
  % Syntax: [Gp] = flipRphZeros(G)
  %
  % Inputs:
  %    - in_data -
  %
  % Outputs:
  %    - in_data -

    [z, p, k] = zpkdata(G);
    z{1}(real(z{1}) > 0) = -real(z{1}(real(z{1}) > 0)) + imag(z{1}(real(z{1}) > 0));
    Gp = zpk(z, p, k);

  end
#+end_src

* flipRphPoles
:PROPERTIES:
:header-args:matlab+: :tangle src/flipRphPoles.m
:END:

#+begin_src matlab
  function [Gp] = flipRphPoles(G)
  % flipRphPoles -
  %
  % Syntax: [Gp] = flipRphPoles(G)
  %
  % Inputs:
  %    - in_data -
  %
  % Outputs:
  %    - in_data -

    [z, p, k] = zpkdata(G);
    p{1}(real(p{1}) > 0) = -real(p{1}(real(p{1}) > 0)) + imag(p{1}(real(p{1}) > 0));
    Gp = zpk(z, p, k);

  end
#+end_src
